using System;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Options;
using Microsoft.IdentityModel.Tokens;
using SelfieAWookie.API.UI.Application.Dtos;
using SelfieAWookie.Core.Infrastructure.Configurations;

namespace SelfieAWookie.API.UI.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class AuthenticateController : ControllerBase
    {
        private readonly UserManager<IdentityUser> _userManager;
        private readonly IConfiguration _configuration;
        private readonly SecurityOption _option;
        private readonly ILogger<AuthenticateController> _logger;

        public AuthenticateController(UserManager<IdentityUser> userManager, IConfiguration configuration, IOptions<SecurityOption> options, ILogger<AuthenticateController> logger) 
        {
            _userManager = userManager;
            _configuration = configuration;
            _option = options.Value;
            _logger = logger;
        }

        [HttpPost("Register")]
        public async Task<IActionResult> Register([FromBody] AuthenticateUserDTO userDTO)
        {
            IActionResult result = BadRequest();

            var user = new IdentityUser(userDTO.Login!);
            user.Email = userDTO.Login;
            user.UserName = userDTO.Name;

            var success = await _userManager.CreateAsync(user, userDTO.Password!);

            if (success.Succeeded)
            {
                userDTO.Token = GenerateJwtToken(user);

                result = Ok(userDTO);
            }

            return result;
        }

        [HttpPost("Login")]
        public async Task<IActionResult> Login([FromBody] AuthenticateUserDTO userDTO)
        {
            IActionResult result = BadRequest();

            try
            {
                var user = await _userManager.FindByEmailAsync(userDTO.Login!);

                if (user != null)
                {
                    var verifUser = await _userManager.CheckPasswordAsync(user, userDTO.Password!);

                    if (verifUser)
                    {
                        result = Ok(new AuthenticateUserDTO()
                        {
                            Name = user.UserName,
                            Login = user.Email,
                            Token = GenerateJwtToken(user)
                        });
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError($"Une erreur s'est produite : {ex}", userDTO);
            }

            return result;
        }


        #region Internal methods
        private string GenerateJwtToken(IdentityUser user)
        {
            // Now its ime to define the jwt token which will be responsible of creating our tokens
            var jwtTokenHandler = new JwtSecurityTokenHandler();

            // We get our secret from the appsettings
            var key = Encoding.UTF8.GetBytes(_option.Key!);

            // we define our token descriptor
            // We need to utilise claims which are properties in our token which gives information about the token
            // which belong to the specific user who it belongs to
            // so it could contain their id, name, email the good part is that these information
            // are generated by our server and identity framework which is valid and trusted
            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(new[]
                {
                new Claim("Id", user.Id),
                new Claim(JwtRegisteredClaimNames.Sub, user.Email!),
                new Claim(JwtRegisteredClaimNames.Email, user.Email!),
                // the JTI is used for our refresh token which we will be convering in the next video
                new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())
            }),
                // the life span of the token needs to be shorter and utilise refresh token to keep the user signedin
                // but since this is a demo app we can extend it to fit our current need
                Expires = DateTime.UtcNow.AddHours(6),
                // here we are adding the encryption alogorithim information which will be used to decrypt our token
                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha512Signature)
            };

            var token = jwtTokenHandler.CreateToken(tokenDescriptor);

            var jwtToken = jwtTokenHandler.WriteToken(token);

            return jwtToken;
        }
        #endregion

    }
}

